--Задача 1. Дефинирайте следните функции:
-- a). (mIdentity x), функцията идентитет: връща x без да го променя.
mIdentity :: a -> a
mIdentity x = x

-- б). (myCompose f g), която връща композицията на функциите f и g.
myCompose :: (a->b) -> (c->a) -> c -> b
myCompose f g x = f (g x)

-- в). (myNegate p), която приема предикат p? и връща предиката (not p?).
myNegate:: Bool -> Bool
myNegate p = not p

-- г). (myCurry f x), която приема многоаргумента функция f и първи аргумент x и връща функцията, получена от частичното прилагане на x върху f.



--Задача 2. Да се дефинира процедура от по-висок ред (difference F a b), която по дадени едноаргументна реална функция F и две реални числа a и b намира разликата F(b) - F(a). Да се оцени примерно обръщение към процедурата.
difference :: Num t =>(t -> t) -> t -> t -> t
difference func a b = (func a) - (func b)

--Задача 3. Чрез използване на ламбда израз да се дефинира процедурен обект, който е еквивалентен на f, ако имаме дефиницията f x = 2 * x.
fLambda:: Num t => t -> t 
fLambda x= (\x -> 2*x) x 

main :: IO()
main = do
    print(fLambda 24.5)